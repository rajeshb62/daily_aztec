 Okay, 20th of November, 1148pm. I am well, end of today. I ran the upload, the astig experiment. We have to actually follow it. It closed that a logical conclusion and then from experiment created in Uripo, called Celiastic-Wallet-Upgraded Read Me, and I will continue to work on it in the Uripo. I opened the cursor, the log for it. Sorry, the cursor window for it. I will continue to work on Celiastic-Wallet-Upgraded Read Me. Hard-coloured contract is there. What I want to do is I want to slowly and steadily move to incorporate my email wallet, and stuff that I need for my email wallet right here in the astigualities. I want to, from that perspective, I want to go to this, which means I want to rewatch the conversation, the last conversation with Josh Josh, my demo of my astigualities. Sorry, the ZK email submission for Alphabelle 2. It contains his feedback saying, implement this in custom account contract, change the East-Varid implementation. Look at the East-Varid implementation of Jau Lagob, who had this HOTP-based 2 stage verification. Yes, so I wanted to, I want to, go back to his feedback from that call, and want to see if given my new understanding and my new report, and my better, I include understanding of astig account, and my code running code of astig hard-coded contract, along with the TypeScript files, if I have enough understanding to understand this feedback, and then to proceed to if I can build on from there. So that is a good thing to try, that is where I am, and well, that is that, I mean, as part of the TypeScript files, as part of the TypeScript files here, I ran, I basically deployed the astig hard-coded account in the Docsway, which is there in the astig packages way. Also, apart from my own implementation and deployment yesterday, using really, they see local means and unsophisticated means, and only difference is, we verify auth which is different between the two, otherwise it is much the same, the structure of all the implementation, so you have the same object, so it is like valid in deployment. The second thing that is different, which I think my implementation will fail, because of is the lack of the private address for signing, which is random key, random private key there, whereas what I need needed is the private key to be half-coded, because the public key is a hard-coded. So these are the two differences, and I may, so because now I have two different ways of deploying the contract, and I proceed it after deploying the astig docs way of deploying the hard-coded account to sandbox, I also, to do a contract. Interacted with it, interact with the poochon contract using that account, deployed token contract, minted private minted tokens for this, and also showed private balance for this hard-coded account, so that is good progress, yes? So from this starting point, I want to now move on to where I am, what I spoke earlier in this, which is which is genres of food, which is just, which is win Tooki. Which is, understand joyous food int satate gastÂìÅ, and stuff here, yeah, stuff here. And try and build the GK email account contract for my use. Yeah, so end of what you notice, 20th of the number, 1154 PM, 5 minute 40 seconds,
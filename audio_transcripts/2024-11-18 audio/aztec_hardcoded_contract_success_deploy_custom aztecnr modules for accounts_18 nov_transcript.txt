 Well, today is 18th, Ravombar, 11 PM. So, I did not record audio today while I was coding. So, to speak, so it was a casual day today. I started working only past 5 PM, something like that. But it was a fruitful day. In that, firstly, I got the hard-coordination or account, which is there in the docs, which is there in the the Aztec docs. I got it to compile for the first time. The last time I tried, it threw errors. This was like a week, 10 days ago. The reason that it threw error then was nothing to do with the versions. So, nothing to do with the compatible Aztec versions, which is at the 10.6.6.2. And then comparing it with the noir version. So, Nargo, Nargo minus minus version. So, it had nothing to do with the compatibility of noir version with Aztec version that I have installed. It had more to do with the dependency in dot Nargo to Nargo to ML5. Especially namely, authorit. You have to bring in or you have to add that dependency in Nargo dot to ML. That is essentially Nargo, which it is essentially. No project folder in Aztec packages. And authorit contains the methods that Aztec account typically has. You can use your own without using the one that is there in authwith. But it makes it easier. It's got all the methods that are needed. If I think it is. Interpoiled. It is get in a hash out of hash that I was looking for. It is it does not throw it. Either this or either authorit or in Aztec's Aztec folder of no projects in packages. And then I realized. So, that was good. Good fine. So, which means that. If I want to which that what I want to do. Change the keys. Once I have made Aztec hard code contract work. What I want to do is. Change the keys. Change the keys to and the account logic account authentication logic. And this. And encryption key. First I want to understand which of which is the encryption key and which is the signing key in the hard-coded contract. Well, I feel like. It is just the public key. Public key x comma y. Two values for public key. So, I need to just understand. In my mental model. Public key is one hash. Whereas they have two hashes. In public key. And then where is the private key? If it is a hard-coded contract. So, I need. So, that is a smaller thing. But what I want to do is. Pull out the logic. From the hard-coded contract which is already there. The Sloan logic. And put my. Log in password. And RSA public private key logic. And make it work. You know, it's like. It's like Sisi Aztec account. Yeah. So, that is something that I wanted to do. And then I wanted to wrap around it. Put a wallet. Because once I have a CLL wallet. I want to put a CLL wallet around it. So, that then I can interact with the. Sandbox. Yes, using my Sili wallet. That is what I want to do. So, but then before that I had to get. Uh, interact with. The. The. It's not hard-coded wallet first. So, uh. After adding the. Authenticity. In a Nargo.to ML. It compiles successfully. So, it created. Uh, dot json in a target folder. What I needed to do then was. Uh, well, deployed to the sandbox. Yes. So, it first tried it with the Aztec. Hiven wallet. Yeah. So, I tried to deploy it with Aztec. Wallet. But it turns out you can't use Aztec. Wallet to deploy an account contract. Uh, where there is no initializer. So, the Aztec wallet. CLL. It. It. Expects an initializer in the contract that it's the blind. So, it failed with that. Then I figured. Uh, then I tried to. Makes some. It's. Use the create account. It said use create account. Uh, command of Aztec wallet. Aztec CLL. CLL. I want it. And that didn't work. Then. Uh, with. Along with. Cloud. I. I. The days. I. That. You cannot deploy an account. I. With the Aztec wallet. CLI. Yeah. So, it's not meant for that. You can do it. Apply anything else. Other than an. Account contract. So then I looked at the documentation. Of. Uh. How. Uh, the hard poded contract has to be deployed. There in docs and it's there. And then the example's and a contract. Uh. on the that header, deploying your own contract and there it has they have shown how they have deployed the hard code to contact. It turns out that it is they have they've used TypeScript. Yes? So I've at first thought it's simple it must be a simple way because you now have via code gen. I have a by using yarn code gen. I have already dot t s file. So in SRC what code gen yarn code gen does in the as take starter repo the default yarn code gen script it creates in an Rtfxit artifact folder and inside that it creates a dot t s file which is taken from the the title of the project from in Nargo dot 2 ML file. So what it does is then it deployed a snore hard code it account dot t s in an Rtfxit folder in SRC. So this was done by yarn code gen. So then I had it as file. So therefore I thought since Cloud already knows TypeScript. So why don't I give the TypeScript file to yarn and to Cloud and tell Cloud to deploy the contract? It wrote something and that failed and because I don't know TypeScript well at all I could not troubleshoot it and fix the error therefore. So I then decided to bit by bit smaller steps. So the script folder of a starter project which is essentially the parent of my as take experiment. So as take experiment is set is phoed from as take starter and in which I repout the NOR code in main dot nr and put whatever I put all the experiments that I wanted on and in this case today I had deleted the in main dot nr cloud funding contract that existed before this. So I was trying out as take wallet underscore high fund wallet commands and therefore I had the contract cloud funding which I repret out and I replaced it with hard code it's not contract today. So what this was supposed to so I'm coming back to what I want to want it to do right now was there are a couple of T s scripts already which was which you used to you can use to deploy the the the codegen via codegen via compile whatever has been compiled via codegen yes whatever T s script file has been you know binding has been created you can use it to via T s via and via the web frame web framework yes you could I could like you can't upload it you know call the deployed or T s script which will which if it in case of codegen it would have deployed the codegen contract yes or there is the second script called get block dot so it would you can call yarn get block and it will run that script so this is this came in very handy on the Aztecs start the pack to put the to deploy the hard code and Aztec contract using type script instead of Aztec high fund wallet from the command line yeah so I could not do that therefore I had to use type script and I had to deploy the hard codehead sorry I had to use the type script script and these two came in very handy so one good thing that plot did when it created the deploy script for snore hard codehead I created a file called deploy and the score snore hard codehead dot t s in the scripts folder and that code that the plot gave me for that was very simple it was very less it was like 30 lines or something they were few imports and then they was just trying to deploy so first thing I discovered was well one of the errors was that it did not connect to pxc to start with it so that I figured out by looking at the deployed dot script which was already present I could not use the deployed dot t s because it was meant for deploying a contract and not the account contract or something there was some reason why I could not use the deployed dot t s file directly because because because because because there was a why not well I did see some salt and random and all of that because of which I could not I could not do it so it turns out like well it doesn't use I think it doesn't use initial test wallets or it basically had this salt and doing it actually created an account so I thought that's very complicated so let's deploy snore hard codehead account like a create a separate file and it was throwing errors which was deployed dot t s therefore deploy snore hard codehead dot t s that was I so first is I dis the difference that I saw deployed dot t s is that it was it did not connect to pxc so you had to you know declare pxc and then you had to await set up sandbox and say and then return which returns the pxc object and you had to save it in a variable called pxc at your end and then you had to use that to interact with the pxc so that was not done in depluss not so which actually flot shared me the code so that was the first thing I gave flot this this pxc is a cloud-sided pxc it was I was still getting this error which was just out of the block yeah so as soon as the try to compile this it used to throw up an error so typically in type script files I realized that it doesn't it goes piece by piece and it executes the line by line and it until it finds an error unless it is a syntax error unless it's some very glaring syntactic or some typos incorrect import stuff like that where it will throw at the beginning otherwise you can put in console log commands and figure out which line failed because it was line by line executing so it was failing it turns out like because it took me a while to figure out that there was something basic which was missing and you know it took me it was a bit of time because well I am not familiar with type script and any error that I face it feels like oh huge and then I ran to clawed or cursor cursor today was what's absolutely shitty it was just it was not generating any response inside as to get experiments it kept hanging it kept waiting for a response like for long period of time 15-20 minutes without it was in generating phase and it never generated a response and I had to cancel that so therefore I went back to clawed and I would any error like type script through I went to a clawed and then so and then the clawed would not solve it and then I got the sense after 34-5 such quick run to clawed get revised load put it here I realized clawed was not figure able to figure I was not getting the answer therefore was just throwing me code without having any confidence so I stopped for a bit and broke it and that thought let me do the simplest thing that get block stripped was working very simply very easily and that was running and then it was throwing the throwing like console log which is the little block number one and the contents and then the hash so I saw okay that was working and then that was that's actually very simple script it's like 10-15 lines so it was very easy to then compare so what I did is in deplushtnard how to prevent really juvenile when basic and then into deplushtnard contract I commented out the parts which were different from get block and put the get block commands in this and then you were still failing that that's when I realized my import local import of the corgent output which is in artifacts slash not hard-colded accounts with that was failing and that was failing because my import firstly the address was not my character that was still failing the correction happened somewhere in the middle not the at the endpoint of the this terrible resolution but there was another error which was my import itself I was importing it's not hard-colded account object from it whereas the object there is no such object the object actual object there is called not hard-cooded account contract and I was able to troubleshoot design if I this line and then troubleshoot because of the get block.ts code very simple code there and which was not running when I got a close to exact lines in deplushtnard hash not hard-cooded.ts so that was a big breakthrough so I fixed that and then I think a couple of rounds with clod I was able to you know actually quickly get to deploying first a snor account random snor account you know first I get account which registers it then you deploy it then I then you deploy it using snor account or deploy it or wait so then and snor account get wallet. I mean basically snor account deploy deployed or wait and then you get const then you get wallet equals a wait snor account or get wallet. Maybe this is the line that I need to fix for the Alice wallet part failing because once you wait yes then you need to wait get wallet. I think so. I think so. I think so. Yeah first you need to deploy it because it's async you have to wait and after that you cannot immediately done dot just come a hard-cooded dot address to state. I am just too I think I understood why the Alice account related to deploy was failing okay. So but coming back to the current point I got distracted by an error that that could come later and that was unable to solve one. Now I think I figured out how to solve it but going back to the the first deployment of hard-cooded contract succeeded so I basically created used random signing key random encryption key get snor account to load the get the snor account within the TS file then then I then I wait snor account or deploy it or wait yeah so it basically triploid and then wait it once it deployed you got then once it deployed after that I could call the wallet which is snor account get wallet before deployment you cannot get wallet when it takes a bit of time in the sandbox to deploy it. Therefore you have to and they are synchwaid to help in that. So once a wait snor account or get wallet you put it in wallet right once you have the wallet then you use the wallet to delete it to deploy the current contract right so I have two deployments so I using Alice account so then I thought okay why do I deploy one contract to deploy my contract one contract out of the library I it's available out of the box with the sticks and my stick packages. So why do I do that instead why don't I use Alice accounts you know one of the initial accounts so there is a way to use the initial one of the initial accounts is Alice Bob and something so you can use Alice and then using Alice I can you know dot you know I can use the snor hard quote account track and deploy using the wallet I can deploy this this object as a contract as a account contract that's what I can do and then console log so first I will show the my own scroll deployed scroll account it work with the then I replaced it with the initial Alice wallet they have it failed that was an annoying fucking error which I could not fix until now then I then I realized now that wallet needs to deploy therefore there has to be deployed to dot wait script that has to run after that only after that can you do wallet dot address which is hard quote at account dot address to string hard quote at account is the wallet so once you get that wallet so hard quote is not just the account it's the wallet yeah so once I do that then I can run hard quote at account yeah yeah then I can basically console log yes so yep so I think I figured a way to solve that so now I but that took very long there were a few cycles it's my system is slow because there is a audio transcription with the large model that I'm trying because it had music in the background one of the important audio files had audio notes file had music in the background one on fifth where I outlined my strategy my approach why I stick why all of these yeah so I did that and that file had some music in the background therefore I was not getting therefore I use the large model to do the audio transcript of the audio file and that is running for close to 24 hours now I expected to run for another 24 hours so therefore it's slowing down my system so it's still running and therefore Claude was slow and then cursor I don't blame you possibly because of that processor being used so I'm very careful about my laptop processor and storage being used so for I close all the browsers firebox chrome etc and so I tried to run this it failed miserably and then therefore I okay so I said let's stop with the Alice wallet you know effort let's just be happy that my deployed wallet is actually deploying the astix my pointer astix hard quote it wallet so I want to now then go then from here I want to want to go tomorrow to report parts of the hard quote it account and put in the logic that I'm interested in it's either login password or the public private key pair of RSA algorithm that is what I want to do tomorrow and in the process understand the little bit of confusion I have okay when my login password and RSA key example the authentication key says per my logic have to be login password and the signing key has to be RSA public key private key so whether my contract can handle that whether these these my custom account contract using this logic whether it can take the login password as the mode key encryption key and the nullifier key is the question that the little more clarity I will get in my just conceptual you also but be able to execute and create this account so this then with if it within this astix account will be a C account yeah astix Cilia astix account because well it's it keeps the RSA keys to itself without sharing it with the user and just does for as far as user permission is required it's always going to ask for the username and password so that is something I want to execute tomorrow and so this is this is beautifully set up for that yeah so I think this is problem so this is good progress yeah so account is a lot less scary you know thing to for me today even if the hard code account does not use ease valid implementation it uses some other method and these are the things which details that I will get into but right now what I want to do is in this audio file transcribe it and push the current GitHub repo of astix experiment with the comments well this is this session yeah which is the last session the first session of 18 November night and I want to push that then I want to daily astix folder the repo I want to just write a couple of lines for notes of today any links or chats to the clod link and also at the audio file transcript and you know push it to GitHub as well and that will close my activity for today and then I'll start tomorrow so I'm closing the astix file so you can notice there is no music in my background because it is interfering with the audio transcription and ruining the quality of audio transcription therefore I've stopped having music on when I'm doing audio notes so the we end the audio notes for today and onwards to pushing the GitHub the two GitHub repo of the two different repository for fantastic experiment which contains the hard code it contract working version and the intractable with the type of version sorry deployable and deploy using type script version so it's a complete version that works I want to push it and then what I want to is of course also push you know add the chat in a text file the clod chat in a text file and anything any other learnings that I have which is specialy botastic packages and customization of the dotterner accounts contract which is which is using astick hyphen and are folder of the noir projects folder of astick packages yes so and then authorit inside that and like how you know account and entry point and ease valid implementation all these methods are a part of that so those are the things I want to note in my text file and and also at the audio runs and close it that's what I want to do the same for today 11 40 PM there is very it's today hmm I don't have dinner I had good lunch good solid lunch and I had (kept you know) capuccino! in the evening and I want to see how I hold up through the night I will find it hungry if I wake up so on so on and then for tomorrow breakfast I'll just have eggs and get started I think coffee at (grab) crab! place and get started so this is the end of the session audio file for now
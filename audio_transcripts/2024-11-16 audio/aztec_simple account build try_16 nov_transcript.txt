 Well, well, well, it's still the 16th of November, Saturday, 2020-4. Isn't that fabulous? A beautiful moon outside. I'll have the music in the background on quite low. So that it doesn't affect the audio very much. It doesn't affect the transcription. Oh, the moon is hidden by... ... hidden by clouds. Now, I want to look at... ... well, the progression. I want to document, you know, the progress since the end of Alcabir II, where that left me and what I had... ... the items that I had to complete from there. And I hope I have progressed for the week after that. Right, and I want to document it. And write it down, yeah. And hopefully put out a piece, yeah. Not for myself, yeah. So let's go. Yeah, I mean, let me start documenting the piece itself. And should I do it on GitHub? I should do it on GitHub. Let's go. Weekly piece. Let me do it in daily aspect and call it the weekly summary. Ah, so let's say... ... weekly summary. All right, we call it the new folder. And we call it weekly summary. Weekly summary. Here we go. And inside that, we create dot and be file. Or should I create a dot TXT? Let me create a... ... a 16... ... now we'll remember... ... 2044. Should I say, yeah. Let's keep that format for now. So I will rename this... ... 2044. ... 1640. So that it's a mark, not document. So I will say, where I was left, after alpha. ... the two. I had to implement... ... the email. ... the whole implement. ... the account contract. That took... ... here and password in books. As a start and subsequently... ... ... I have to read the link. ... mark contract. ... light. ... chopsticks. ... a stick wallet. ... folder, huh? ... something light. Now there is the... ... the... ... folder. Let's see. ... I'm just impressed. ... I got it by Chasse. ... what's his name? ... a stick wallet. ... by not forlkrofe. ... huh? Let's see who has our channel logo from the memory. ... oh, still working on it. ... download or still working on it. ... yeah. ... yeah. ... wow. Very nice. ... download or still working on it. ... this is the... ... it provides users. It's a secure account management. ... seamless token operation. ... robust transaction handling. ... and seamless integration. ... it decentralized application. ... it's a real shield spot. ... oh, so it's Java logos 1113. ... it's a... ... it's a... ... method, it's in contracts. ... and I had to figure out where his... ... where... ... he's... okay. ... so he's got some more contracts. ... within contracts. ... he's got... ... something called... ... factories. ... download factories. ... man. ... good fucking guard. Where is it? ... I'm looking for easy implementation function. Where is it? Is it in utils? It's probably in utils. Is it in utils? So all or is it like all the gears as files are here in utils? I was actually looking for... ... accounts are restiers. Now I'm looking for a contracts. Now I'm looking in contracts. I'm looking in... ... what does it mean? ... I'm looking in the main north. Let's see. Let's say I wonder if this implementation is here. ... enter this endpoint. There is valid implementation. 62. This is the line. ... flash. ... flash 62. Yes, so I need to have a cloud. How do I... ... how do I pick... ... how do I pick... ... how do I pick... ... a specific line number in a GitHub. You are in say line 62. ... ... I guess it is. ... L 62. ... hash L 62. This is this implementation. So basically, he pointed me at the create smart contract. ... like his implementation, his valid implementation. ... I, for example, my guess, create smart contract. Like his employer, like this. ... I had to do it, okay. ... which means that we copy paste that ... this implementation, ... comes a contract library, ... method, but the fuck is a contract library, method. ... this implementation. ... there is this implementation, his valid implementation. There is the next method, contract library method. Oh, yes, so this is the one. ... yeah, right here. ... right here, I'm looking for something that I've here. Yes, that's correct. ... before this method. ... something like this. ... yeah. ... fuck. ... I... ... my anonymous interpreter of this code. Let's see what... ... you know, not a course or express. ... ... so this is valid implementation, ... is of the macro type, ... as take no in it check, that flag, ... and after that, function, contract library method. ... okay, this is the two macros. ... and after that, function, he's valid implementation. ... so there's no in it check. ... so there's no in it check means it will run it, ... it's not going to put it behind the implementation. ... it's not going to put it behind the new function. ... okay, so it says, this is a method from what appears to be an ... as take smart contracts, implement a two-to-peer, ... and what the fuck is a two-to-peer. ... it says a two-to-peer is a gemacy based one-time password. ... okay, it's a one-time password. ... here's what the code does, broken down, purpose. ... this is a validation function, is valid implementation. ... validation function, provided one-time password is valid. ... main components, checks a digital signature, verify the HOTP code, ... updates account to prevent code reuse. ... okay, step by step, get stored public key and secret from contract storage. ... restart, grams, music. ... get stored public key and secret from contract storage is the first step, ... the step by step. ... first step is, get stored public key and secret from contract storage. ... that public key is storage public key. Get not, well, I understand. ... let mutable hot-p-secret equals storage hot-p-secret, get not. ... dot load not. ... second-stage, get-send verifies the signature. ... let witness equals field of 68 that is 68 array field, unseal. ... get-out-witness-out-p-r-hache. ... yeah, let-out-witness-out-r-hache. ... oh, that's a witness. ... so this open-hache is a thing, huh? ... I've seen it before. ... so here it converts signature data and verifies it using Ethereum signing method. ... oh, that means, ... so basically you got the witness, huh? ... yeah? ... three, get the HOT-p-code. ... out-r-hache. I've need to learn what out-r-hache is. ... so it's gonna get, it gets authort-ness, yeah? ... so, it gets authort-ness method, and it is signed-setting, ... in a 68-telliment field array. ... converts signature data and verifies it using Ethereum signing method. ... I don't know how that's happened. ... three, get the HOT-p-code from the last part of the witness data. ... witness-67-us-u-32. ... let HOT-p-code witness-67-us-u-32. ... witness-60-us-u-32. ... let's say the last one. ... 60-60-seven. ... with my 66... ... huh? ... 67-66-65-64. ... the last four-ute-32. ... hardly the Choto-P-code. ... why? ... I don't know. ... check the code against three possible valid codes, ... current counter, counter-manus-1, counter-plus-1, ... this allows for slight desigress between the lantern counter. ... or the fuck that means. ... second of which a sticks digital, ... signatures to verify the sender. ... uses one time password and that change with issues, ... has a counter-prevent replay attacks, ... allows for smaller counter mismatches, ... helpful for real-boy use. ... after validation it's successful, creates the counter, ... updates are stored secret with new counter. ... Returns to if anything is valid. ... this is similar to how Google or other two F-Apps work, ... but implemented in an ASTX-mart contract with the original ... to predict security would let me. ... explain any part in more details, no, I don't want to explain any part in any further detail. ... what I learned is I did not understand this even one bit back then, ... understand this a little bit now, ... I don't get as scared, ... but I still do not understand enough to implement this in mind. ... my code, I mean the words now seem familiar, ... the constructs look familiar, the macros I understand, ... know in it something, ... know in it function and after that library, ... storage library or something, ... then is very implementation, ... then how the items are retrieved from storage, ... then outer hash, how witness is gathered from outer hash, ... so these are familiar patterns, now a little bit of the same thing, ... but I still do not know how this thing is going to work. ... so I do not understand the detail of this code back then, ... start thinking about an account, ... with the email, ... hash and hash encryption and signing secrets. ... yeah, that is the truth, what what happened? ... and then what? ... then what I did is I try to ... to ... collect from as rich chat, ... AI, ... contract, ... be, ... account, ... score, ... with the email, ... from, ... and then ... email and password, ... as encryption and signing secrets, ... so it gave me this, ... which did not compile, ... it's fucking did not compile, ... so this is the prompt, ... I want to take an account, ... contract, that makes you a stick snore, ... contract, you text to, ... by putting what's known, ... we do strings as well, ... and the two, ... why should I even have set snore? ... ... up to here? ... I should need to get a set snore, ... a snore. ... my prompt, ... to, ... a stick, ... share, ... AI. ... a stick, ... a, ... return, ... this, ... will this go below? ... why does it ask for snore? ... why did I ask for? ... I secret key, ... and, ... thank you, ... I could have done without it, ... yeah? ... by the fuck would I do that? ... yeah. ... just use hash to look as it says, ... the, ... if it's not a javascript, ... I'll find it. ... like a fucking denon on this time of this shit. ... I do what you're gonna ask if it's not. ... do you want to use these bodies? ... ... I still remember the truth. ... ... yeah, so that won't work. ... so what I'm gonna do now, ... let me just enter, ... let me see if my prompting skills are in food. ... to create an account contract that makes use of the, ... fuck it. ... that was the fact that this stuff was bad. ... count to create an account contract, ... simple. ... it's two private and roads, namely, ... namely, ... string, namely, two private and namely, ... email and password. ... it hashes, ... the email. ... and uses it as secret encryption key. ... it hashes using shaft of the six, the password. ... and uses it as sign key. ... that is what they're saying. ... it passes these two keys and so on zero, fuck it. ... count contract with this, ... as encryption secret key and... ... sign key. ... show me, ... contract code. ... it is here. ... this is my new prompt. ... I said, ... docs check, ... bye-bye. ... I said, ... docs check, ... return, ... this contract code. ... I don't have, ... it's code, ... this exact requirement. ... simple contract, ... the password is in a contract. ... the contract is in a contract. ... this is a contract, ... the contract is in a contract. The department tells a contractions. Autoh travels with us, and all three minds have been written useful. So, it gives a contract, a hard snore hard coded account with the, that's a contract, so it says use dip dependencies, authwith from authwith to get account actions, from auth and score witness you get get authwithness, and entry point is app payload, so it says this is the same thing, so there is an entry point, then there is a account action, and there is a get authwithness method, so all this is part of it, then there is a private context, from a stick payload, and then from dependency actually it goes for instance there is private and you, and there is only private and you, there is no storage, it is no storage, what the, what the, I want to ask them, I guess I saw it, while it replies, I want to go reply to me, so I see that it replies is a, in a stick, a critical component, especially when dealing private data, however the concept of storage is different from traditional, as take uses unique storage model that involves public private slots, notes, for specific use cases we have shown the email and password to use as a stick payload, you typically manage this as private data, you would as a SteX private state management to handle this securely, so it is not giving me a direct answer, but says Ei, you do not need storage, but you know, JAOSF, not JAOSF, JOW LOGO, JOWA LOGO, he has a storage implementation, he has a storage implementation pretty impressive. Not impressive but at least I get where it's going. So it's a school. Well, well, so let's look at this core. So it's a couple of definitions already there. Global public key X is field. Something global public key Y is a field of certain value. So it's hard-coded, contractors. What's giving me? Hmm. See, it's a simple spirit smart contract. Then private function entry point, app payload is app payload. P payload is fee payload, cancelable. What does it mean? It's bull, global 0. Okay, entry point. I know I know what, what's the same to your point. So entry point is lead actions equals a contractions in it context. This valid implementation. Actions if it is valid implementation, then actions entry point, app payload, fee payload, cancelable. So then verify private output in a hash field. Lead actions equals a contractions in it. Actually, verify private output in the hash. In the hash and out loss. I know come across in the hash and out hash in the documentation. I need to see if it is there. So after this I will go back to the documentation right. I will because then I will describe what I did, what I tried anywhere. So this is what it is. So. Is valid implementation context and word private context? Outer hash field, bull, that fitness equals field 64, unsafe get-off withness, outer hash. So what it does is is valid implementation. Okay, so then there was verify private output. So that's a method. Then there is ease valid implementation, which takes private context, which takes outer hash. So what is outer hash? I need to know that's why I'm going to go back to the concepts and the documentation. So there's a inner hash, which was passed to the verify private output. And the outer hash is passed to these valid implementation. So the load outputness and format as this. Okay, so as a part of it is verified signature. This valid implementation only if verified signature happens. Let witness is field 64, unsafe, outer hash, it moves signature. So you assign the signature. Witness, you assign it to the signature. So the signature is the signature. So inner hash was... What are we doing? Fuck, it's a recursive function. So there is a private view function. Function, verify private output. It takes inner hash as the field, as the input. Then field. Field and output is field. Okay. Let actions equals initialize. Mutable context is valid implementation. Context is valid implementation. Action. Verify private. Or, if it's not. Or, if it's not. And it is calling the is valid implementation from initialize. Contract library method is invalid implementation. Context, mute private context. Yeah, private context. Yes, outer hash field. Then it assigns witness. Mutable signature. I is 0 to 64. Signature I equals witness. So it assigns the signature to the witness to the signature. Witness is, get out withness of outer hash. Outer hash is the input to the method. Then what's going to do this? Verify signature. Public key x, snar, snar. Snar, really. If I do it, you know what is your snar method, snar signature. Okay. We'll ask, let me see. What is the, what is the, is the snar signature scheme of signature. Okay. Let me ask snar. Distance signature. Oh, sorry. Put a, it gave me a, Python code. I will, I will use the Python code. Verify. Okay. I'm still in, hmm. Verify signature is in hard-coded public key. Public key x, public key y signature. Outer hash is to be by 32. Yes. So it's my own. Verify the outer hash. Signature and outer hash. Yeah. Get out withness of outer hash. So what's going to do is, yeah. Why does it even need witness there? Well, signature I, yeah, witness is there. It took signature and signature passed through the, Verify signature method of snar. Verify signature. Signature itself is, get out withness of outer hash. Right. And that it compares to the, how to hash. And the public key, public key x, public key y. So the hard-coded public key is, public key x, public key y is a hard-coded public key. And it is going to, Verify signature. Signature is, get out withness of outer hash. Ha, ha, ha, ha, ha. Well, anyway, I'm okay. Let me read what, the snar, signature is done. Not to be a excuse. It is here. I've got a number for simplicity. A efficiency here. The key aspects. It could be basis. It's going to be, okay. Parts extends to exist in shilang for the uncomfortability and the chosen method. You attack key components. There are pq and g, domain parameters. P, dash prime, q is, prime divisor of p, okay. And g is, large prime, prime divisor of p minus 1. Got it. Okay. q is prime, d, whether of p minus 1. g is generator of order q. prime, q is prime. p is prime. q is prime divisor of q minus 1. So q is prime. And g is the generator of order q. private key is random number x. I see. private key equals, private key y equals g power minus x mod k. Public key is g power minus x mod k. That's a public key. Main operation signing. There is a private key. There is a public key. Gender random non-sk. Compute r, g power k more p. Calculate challenge equals h, ms h equals r, compute sk plus x mod. Something something, l is the, no. This is, snor, signature, alvarita, as per, cloud. All right. Very good. Okay. So then there let's see signing. There is a compute r equals g power k mod p. What is k? There is a random non-sk. g power k so r is r, calculate challenge equals h ms h r, h ms h. The fuck does, ms h double parallel r. What does this mean? Okay. This described a hashing operation where the h represents the group of hash function, let's start to move to six. Double this double parallel lines means concatenation joined two pieces of data together. Fuck, why? So complicated. Hash, okay, got it. Message is a data insight. Okay. So there is a non-s, then there is an r. Hash of message.r. Compute s equals k plus e x mod q. E x mod the fuck is e. What is e? Come on. Interest random introduced. What is e? Okay. Calculator challenge. His hash hash is the hash. Compute s equals signature is e com a s. Is the hash comma s? S is k is the non-s, random non-s. plus x plus k x is the hash. Exes. Exes. Exes. The private key. Hashing to private key. K is. Non-s, less hash into private key. Monq. S e com a s is signature. I see. So there is a signature. Then there is a e com a s verification. Compute r v. equals z plus s. Compute r v. Compute r v. Fuck is r v. R verification equals g power signature. Into y is public key. Public key power hash. What p? R v. That is R v. Calculate e verification. R verification. E verification equals b. E verification is hash of messa. R verification. Message concatenate r v. Calculate e verification. We will do a hash of that. Interesting. I mean, I will go that later. But verify is e verification equals u. Hashing verification is hash. So signing here takes is uses x. Verification uses y. Everything else is known. Got it. Understood. Somewhat. Good enough for now. Let's proceed. Finally understand a bit of shnog. Fine. I like it. Okay. What? The push is meant. You can push. Oh, and after. You can push this. This is without the doubt. It's not very interesting. Let's go. Let's go back to the accounts concept. Let's go back to your accounts concept. Let's go back to your accounts concept. What does this mean? Let's go back to your accounts concept. Let's go back to your accounts concept. What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? What? Okay. So, we done fixing. Okay, now let me go. Do the dots and see how we get to the point. Let me see how the idea of getting to the point where we get to the point. Okay. Now we go to dots. And I go to concepts. And I look at the concepts for accounts. So, what happened before I came to dots that we recap. I gave an impromptu. Without mentioning, you know, RSA, give me a simple contract which takes input as email and passport. And give me custom contract. What it did instead, SDKI. It said that we gave the from the books. It gave the standard, a stick. Hard code of public key. Standard family, you know, products, basically from the dots. You give me that hard code of a contract which is a simple, simple, complex implementation. I went through that. I understood like they were had a few questions. There are two kinds. There is an in the house. There is an alter hash. There are these good oddhood kind of method methods there. Good oddhood of alter hash. Then there is some recursive method which is very stringent. Then I do not understand the macro. There is contract delivery method. The macro called contract like the method and now understand the address. And then I basically try to understand the script because when this is a not hard for a snark or a black reference, you know, I got them. I think it was thrown by a draw which I understood the outline of not entirely. Basically the message is to get the next. So, I will tell you about the problem. And public key is calculated. For this, yeah, it is basically more, it is. And then there is a good, you get message. And the same table. So, you have a non-srandom non-s. And from random non, you calculate something called this by mod, by mod, you know, mod, mod, mod, you know, modulus of one of the primes. You calculate the, you know, this to append. You calculate the R. So, in K from random non-s. K generated something like R. And you concatenate message with R and has shape to get something called E is the hash of the. Yeah, yeah. concatenated. This, they want you to do is once you have the hash, then you calculate the signature. As is E, then calculate the signature is K which is a non-s. Plus the hash E into private key and mod one of those primes. Which is, okay, so there is, there is, so you find E which is the hash and you find the signature, which is S. Now, these two together are the signature, E comma S, right? E comma S, S is, you know, we have a formula for this. Now, what you do is once you have the signature, what you do is, you do the verification. Verification is, R verification, which is the, it is G power signature. So, it is G power S, G power signature into Y power, you can public key power hash. So, yes, and then you calculate E verification, R verification and E verification. Right, E verification is R verification. H of O is a hash of R verification, E verification, sorry, E verification is a hash of message. Wow, this is a hash of message concatenated with R E, R E, R E, R E, R verification. Yeah, mm-hmm, fuck. So, R verification is computed from the signature and from the public key. Yeah, from the signature, from the public key and then added to the message, then hash it. So, that is a very fulfilling nature, right? So, there is a public key. There is a public key, there is a signature, there is the outer signature, outer hash signature and outer hash. The outer hash is G and the inner hash. So, okay, inner hash must be E, outer hash must be S. Again, you will see, you will see, you will see, you will see, you will see, you will see, you will get there. But right now, I am in accounts, and accounts I want to understand the dog now, so this is what I understood, I come back to account. Look, here you will be documentation, it is 10 PM. And my 57 minutes of my quick time, record, which means it is keeping track of how long this session has gone on, and it is about 57 minutes. This is all the work I did today, only a few minutes. Let me do some more. Let me do some more. All right, go ahead, I am going to be quite close, and I am going to have to go to the very long, don't smile at all this. Okay, so we go to documents, and we will get documents, and you see what is started with your statistics, I stick our clients as to expand them on the technical concept as to go review, which is valid exhibition, and I am going to have a lot of information on my new client, I know this, I know this, I know this, you see, I found it a product can I say to you, I don't see, I don't know this, you know, this is a product that is in a second one, and I will look quite up. Now, you will interact with that stick for us to introduce, yeah, how it functions are executed in the PLEX, which is grand-site. The R-roll-dop and sent to the public VM running on the anonymous stick mode, public functions are executed in the public VM, the blue-view on-roll-site, the private and public transaction will have to be stored up to 7-3 trillion, the takes is an available public VM, the public VM is an available PC, they are completely separate things. Yeah, yeah, yeah, yeah, yeah. PXC and public VM cannot directly communicate to each other, private transactions PXC are executed first for a web public transaction, private and public state, third state works at UTXO, one got to call notes, or what we call notes, private, state works entirely or notes. To keep this, private everything stored in the app and only UTXO tree, and then only file is created in note, actually, it refers to the stored in the R-roll-null, if I had tree, public state works similar to other changes like it is, and here I have a public lecture, public restory and public data tree. I think I have seen the public data tree example in the token contract, or was it deployment of the California contract? Yeah, yeah, yeah, yeah, yeah. Is that only during UTXO, protocol, the specification, state, no one state is up to the other, but it's the best state, no one. So I'm sorry, so I'm fine, I'm still like says, if I am reading state categories, no cashers, state and state categories, there's the magnifiers, there's the public data, there's the mental, the mental, the suggested, there are two, there are three sort of blockages, there's the three, there's the again, there's the confiscation, and the resources again, resources, and the resources. Open all the mercury, leaves are list of headers, okay, gone in the two far enough, then we say, okay, state categories are category, and then we look at state, RK tree, no cash tree, public data tree, the leaves say leaves is a list, no cash tree, no private leaves is a list, and then when you get a be-made, you have to be-made, all credit is stat whatever it is, you follow, on the front and front, there's the ashes, lower the list, there's the limitations are there, no cash tree, no private leaves, public data tree, no key, no key tree, okay, gone far enough, into depth, addresses and keys, requirements, default keys, for example, use the keys, nullifier, okay, we come back to accounts, okay, so we still are at accounts, I'm still at what is a state, public and private state, let's check smart one, the other person keep in mind that different types are used to and manipulating private public state, working private state is created, companies and other private state, where it has worked in public state, it directly up to the state, accounts, every account in a state is smart one, track, this allows you to implement different schemes so it drives access and then it wants to manage the people, it's, transaction signing, non-splanishment, time key payments, developers can write their own account, contract, they find the rules for which user transactions are authorized and paid for, as well as how user keys are managed learn more about the account transaction. Before I do that, learn more about, find here, nor as it's on the outside, the world personal risk, not far, the mental health of the public state, they are written a few more account, but no, there's no other, you know, the criminal specific, they are left in the plastic, but sure, a plastic, no other use for writing certain things are going to be changed. Communication, we determine, we determine, we know more about the sincere, okay, so where am I going to, the focus, all of that, which specification, past communication, there's a, there's a score, very nice. Very nice, we come to the computer, we come to the computer, absolutely, very doubted, I think it's got a job, I guess. All right, let's go back, let's go back, to where we were. Circuits, I asked a couple of some three types of circuits, but we can in seconds, public, and in seconds, roll up circuits. Yeah, I mean, what's next, deep dive into how, as it works, account circuits, PXE, state model, the hut is PXE, ah, I see there, same concepts, PXE, yes, state model, yes, storage, wallet, storage, storage, start coding, yeah, so, here I am, accounts, yeah, so I'm in the concept page, I'm going to give you an account, every app on the NSTG smart contract, which defines the rules, well, okay, okay, this allows implementation, different schemes, for transactions, so I'm doing the documentation for account, and the stick docs, India stick docs, are still enshrined at the board of the moon. you know how stick, defensive, and explore, relationship with the introduction, please, and I, better tell me, everything that I need to know, especially the, contract library methods, and the outer hash, you know, has deleted, jimla. We'll go through the importance in and then we get, authorit method used in the account, hard coded, as stick, account content. Hmm, if I don't find it here, the next section is important, the concept comes out this. Hmm, in the section, we'll learn how our stick defines, AA, the importance, implications of AA, understanding, and correlation, and identification, and the, and elephant, we'll go through the importance and implications of AA, understanding the account content, and, and, wallets, in relation to aesthetic, concepts of authorisation, and actions according, along with encryption, the future of the management, andastic, we'll start with the mandatory, what is AA section, that every single article on the topic has, so you can skip this if you're familiar with the topic. No, I mean, continue with this couple. The different ways the ability to set the validity conditions of the transaction programmatically. Let's look at the source, start and it goes one step for the split save into three different components. Yeah, QA. Yeah, this is an opening. I was going to prepare for the new. Cam is locked. That is what the production level was to start. It goes one step for the split save into three different components. signature abstraction. Defend and signature that separate. To topם think he's zoo presence in shear production and darle production and ordering. Okay, so, the answer starts now. In most, it is schemes. The identity of a user is no longer represented by a key pair by a contract, often called smart contract, but a product under it. This contract receives transaction pay loads which are validated with custom logic, yeah. And then, integrated as actions to execute, like calling into another contract. Benefits of a multi-pull cannot be integrated in a multi-year, but they include social recovery, MFA, batching, session keys, sponsored transactions, PPM and in kind. Supporting key schemes from different variables, around the articles from Argentina. Yes, NGMR.org, more details, that's correct. I might have read this. Okay, long time, but actually, it's your conduct action. So, well, we have that somewhere else, a context action, what to taste, mash onto the category for. All right, implementing all protocol versus application layer. Instead of implementing it, at the protocol level, a synastic amount of function can be implemented in a petition layer, of an network using smart accounts and matter transactions. So, when implementing a code abstraction, a cheating in the transaction being sent to network is still in a cheating transaction, but it's payload is simply protected. A transaction is squished, that is valid, it is run by the smart contract wallet. Can be implemented in a application layer. When implementing our abstract, now a cheat in the transaction being sent to the network is still in a cheating transaction. Right, scalar is AntesnC function. So now, the dispute or LiSnGA key should be settled as limited to a smart account. Man is closed by thisحت. Often reporting groceries can help with shipping. It deceived being out of keypoints using business. Humanity is ready for today, but I don't know, but I havevi a gripper YouTuber to We have Marknessan��고's IPL. These body equipment that's for the initial inspection its state is prepared and also defined with the Respected Humanity independent. I've always been walking smart, well it's for years and collaborating with network team team to make it even better. The team is currently following the approach as a solution of the team. The same PCAPP is a challenge method for the other team to be simply a straight and Robin softens the experience of driving. But thank you. the love of the The application layer has the main drop by that it is more complex than doing this protocol on the layer. So also, which is difficult to get the efforts in both the layers. Example the wrapper transaction in the meta transaction still needs to be checked for its CCPSC nature. And then the smart contact quality is very standard as set as services. Now they have also been multiple proposals for the community management of protocol and Ethereum. Usually, this usually implies introducing new transaction type or set of outputs where signature verification and fee payment is handled by VBMCA, PSTW, 03, 09, 08 and 03, 04, none of these have gained transaction due to their efforts. You are implementing while keeping backward compared to VTI. However, other chains are experimenting with protocol level A, both staff and Z-Ksing have native A. They are very solid understanding of the contract structure. The CPSC will be the first even compatible with the one for this. So, to maintain the compatibility, CPSC humans have default account contract for solidity that mimics Ethereum protocol. The preventing dose attack protocol A implements a very well known dose attacks due to the unrestrictly cost of valid management. The transaction evaded in transaction requests custom logic that can be arbitrarily expensive when attacking, if flat the main pool. So, if you have a project predicted if you claim that the laptop is needed. So, you basically have to send the expected fee in advance. Application implementation is similar issues. Mark wallet could return that transaction is valid when a layer is about maximum transactionуть遙ode in dates. All implementation shifts the register batch of Çtvous Bel information. The scroll interface is 1.4 to 0.5 to 0.5 for totabilations. Then the continuation system mirrors character based on the statistics usually in the comments. We've already said that we do not have that contact. So, 1 point checking query is Number 2, and BPSC is the countext variable. every account is implemented as a contract. Upon contracts, typically implemented an entry point function that receives the actions to be carried out and the authentication table. Which is the actions method that we said, if we can see that we have a good one options. But receives the actions to be carried out and the entry point function, that is usually access to be carried out and an authentication table. Which is the method what we call what inputs all that. And authentication table, authentication table is authenticate the signature. And the title of authentication, how the fuck do I authenticate? Okay, that is, let's see what's the simplest authentication for authentication scheme. Let's see what is the simplest authentication scheme. This is an impossible application. This is the system. This is Python. This is an impossible password. Passport hash. It was stored on password. So it's a random detail. Okay, so. Simple application. The floor is here. And then there's a value. And that's the place. And the floor has a found. A plastic bag for glue. And this. What is it? This is the system. This is the system. This is the system. This is the system. This is the system. This is the system. This is the system. This is the system. This is the system. And then there's a track. Oh, the found. Contract. That's the system. This is the one by slow-pull. Assume sure you like. And the system is the slow-pull. So there is public key. And then definition of the entry point. Payload. Now let's private calls. Public calls. Non signature. Because payload. So there's an empty point. Private calls. Non-sense signatures. Correct. Signature in our simplest authentication is the patch of the password. Using a password. That will us a fabulous. Let private calls. Non-sense signature. Calls payload. Let payload hash. She calls hash of private calls. Public calls. Non-sense. Non-sense. Non-sense. Where is signature? This public key signature. Fillur hash. So non-sense signature. Which is the authentication payload. That's it. The private calls. Public calls. Non-sense. I basically to prevent replay attacks. Let payload hash. equals hash of private calls. Public calls. Uh... Let payload hash. It's equals hash of private calls. I mean, it's called a private call. Okay. Signature. Distort. Public key. Yes. Signature. And English. English of the package. So, a private signature is right there. This is the validation you cannot. This is the package. This is stuff that I need to go to. Alright. I mean, this is straightforward enough. So this one signaled. So this is the public key. Come and see. New chair. Come and pay the cash. So signature. Oh, load hash. Oh, load hash is the hash of. Private calls. Public calls. Non-sense. Fuck. This is the public key. Come and signature. Come up. Pay the cash. Why? What the fuck is happening here? Now signature. He's hash of password. I get it. And what I see hash of private calls. Public calls and non-sense. Pay the cash. And this type of the key is the user ID. I use a user stick to load it. I use an ID. Correct. And then password is password. So which is signature. This hash of that signature. Public key. Oh, no. What is this? Oh, hash of the key. It's signature. It's hash of the password. And the load hash of the parties. We load hash. And then how is that going to. How is that going to compare to the signature. Yes. I don't know. Okay. Let's look at this payload user password. The based private. I'll provide a basic implementation. I've demonstrated these concepts. I'm looking at the. Clots implementation of the simplest authentication mechanism. Stores. The system stores use an installed. Assorted password access. She uses short to which is for hashing. Though in production, you specify. Specialized password hashing functions like. Right simple registered authentication. Other simple registered. This is the absolute minimum for the. The. The. The. The. The. Is just like password complex requirements. Let's finish it. Yeah. this is I'll ask. She found the shooting. It's completed in. AndID. 20 years. I don't know if it's going anywhere. Import hashlib import OS. So simple lot. So sell.toosers, use an image. Use an image. To solve. Come a hash password. What the fuck does it mean? Sell.toosers is now. Hmm. Sell.toosers is now. Sell.toosers is now. Sell.toosers. Sell.toosers. Use an image.toosers. cell, comma, user's username, yes, is sort comma hashed. username is sort comma hashed, sort comma hashed, password. So that's username. Self-dot users use a name is sort comma hashed. Okay, so there is a random sort, and there is a hashed password. These two are using a, filled out username, SQL sort hashed sort comma hashed. Ah, you don't do. There is not a name not in cell.users, cell.users in password. It unfolds. Can you explain you can example, okay, there is a simple password. There is not a register, I'll expose it to your password. There is not a register, I'll expose it to your password. Or it's going to simply, example usage. Or the register equals Alice from a secret password. filled out about 38.8. Alice secret password, it's 21.23. So if users use an name is sort hashed, okay, so it's like an dictionary, the dictionary. So if there is a username, it will sort comma hashed. password and sort, I see, that's it. It's sort to random of the fuck you know. Authenticate, yeah? So let's see, authenticate. There is no sort past in authenticate. Use an name not in cell.users, it's impossible. Okay, if it is, it present there, sort, constor dash is set but users are using it. I see attempt hash, go to set dot hash password, password plus or, you can attempt hash, go to store hash. Set dot hash password, password plus or, password plus or, you can't get it. So let's start attempt hash, attempt, store hash. There's password, this sort hash it and check with the stored hash. Because the stored hash is that gives the username, the stored hash, the sort comma hash, I see. Yes, right. Sure it needs, specifically an stored hash, because Dragons instead. 7 of 30 adults told their page. So, there is a valid recognition. I count up for use and name. So there is a dick distored of use and name. People sort from a hashed. So hashed equals a sharpening piece itself for this industry. So we're going to send a bidder hashed to the secret bell hash. So there is a switch and so you call you as a lovely, sweet and what does that o Bear do? divided by output you just 걸� in and in Q pulse. Alright, so we want this. We want this to be symmetric. Alright, 1, 27, 1.
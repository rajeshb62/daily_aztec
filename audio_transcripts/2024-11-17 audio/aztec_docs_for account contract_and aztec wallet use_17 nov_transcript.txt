 This is the evening session of post-lunch of 17th of November. I am looking at going back to documentation. I have started writing about the learnings. So let's go. I will continue looking at the documentation. Continue looking at the documentation. Count contracts and wallets. Account contracts are tightly coupled with the wallets of where that uses used to interact with the protocol. That's admit to the wallets of where one of the more function calls to be executed. Example calls will have an x contract and the wallet encodes and authenticate the request as a valid payload for the users account contract. Your account contract then validates a request, encoded and authenticated by the wallet and executes a function. And then you can see the file. Both encoded and authenticated by the wallet. Authenticated, the wallet does the authentication. And executes a function calls requested by the app. Authenticates is a valid payload for its still signature. Execution request note that nothing related to signature verification or payload execution is enshrined in the protocol. Since account contracts are free to define the entry point however they see fit. Therefore a request for executing an action has a simpler structure than an Ethereum and just requires the origin contract to execute as the first app. That's the origin contract. The initial function to call. What is origin contract? Is the first app in the x execution process? You origin contract that executes to execute that initiate this. You contract with the transaction. You contract with the transaction. That defines for example, a swap contract would induce a origin contract. That defines the entry point for a specification you want to perform. If your perform in a two conspire, the swap contract would be the origin contract where the transaction begins. It would hand the initial function call to execute the swap along with any necessary arguments and operations. Handle the initial function calls. The initial function to call you should enter the point. The arguments which encode the private and public calls. The entry point has to be private. The entry point methods are not enshrined in the protocol and any function can be called as an entry point. The only restriction is that it must be private. All transactions are initiated with the client side 0 is proof. This means the handler of the world's. As thick does not impose any restrictions on the action that can be carried out during validation phase of the entry point. Since these actions are executed by the client and wrapped in a Z-0 proof, that is verified by the network. If you are free to call you are free to call into other contracts access storage or do as much computing as you need to need in the entry point. Nonsus and replay protection. Every transaction execution considered valid by the protocol. Emits the hash of the transaction execution request as an alifier. Transaction execution request as an alifier. Hashtag transaction request. Transaction execution request. Pivoting the same transaction from being executed more than once. Nonsus on the other hand are left to the account contract implementation. This allows building account with strictly intimate nuances or where transactions can be processed out of order. A side effect of not having Nonsus at the protocol level is that it is not possible to cancel. By submitting a new transaction with higher fees and the same Nonsus. It is not possible to cancel transactions which are pending. Nonsus is not enshrined. There is nothing that differentiates an account contract from an application. This means that transaction can be initiated in any contract. This allows implementing functions that do not need to be called by any particular user. Pivoting is to be paid out goods. This pay action does not require authentication. It is not taken to be escorted by any user in particular. It is not necessary to cancel transactions. It is not enshrined. It is not the differentiates an account contract from an application. In the protocol. This means that transaction can be initiated in any contract. This allows implementing functions that do not need to be called by any particular user. It is an example. This is not required for authentication. It does not need to be executed by any user in particular. Signarless wallet. This is what I am interested in. Who will explore these wallet? Signarless wallet. Signarless wallet. Signarless wallet. What are these response? What is the base wallet? Signarless wallet. Signarless wallet. Signarless wallet. Create TX execution request. Signarless wallet. What is the base wallet? A base wallet. What does that extend? I have 6 port. What is this? Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. Signarless wallet. call the transfer from function of on token and where the the tokens are owned by attack the account attack. So, let us see, let us say again let us read again authorizing actions. Account contracts are also expected, though not required by the protocol to implement a set of methods. So, this is account contracts job to implement a set of methods for authorizing actions on behalf of the user. So, this is a attack whose authorizing action on behalf, during a transaction a contract may call into an account contract which is using transfer from may call into the account contract and request the user authorization for a given action identified by hash. This pattern used for for instance for transferring tokens from an account that is not the caller. So, the caller is is crowdfunding and the tokens will on to the account. Yes, so who is not the caller that is crowdfunding contract wants to transfer tokens from the account. This is required authorizing method on authorizing action. When executing a private function, this authorizes check by requesting an authoriteness from the execution Oracle whose who is checking this authorization the PXE. The PXE is responsible for storing these authoriteness and returning them to the requesting account contract. PXE is responsible for storing these authoriteness. Returning them to the requesting account contract and returning them to the requesting account contract. So, the requesting account contract do you even need because it is the account itself that is calling for the transfer of the methods transfer of tokens and that is owned by their account. Yeah, so should not be a problem. Authiteness can belong to the current user executing the local transaction or to another user who shared it out of the hand. So, this authoriteness is created by Patak on behalf of Patak, which is what the yesterday Cloud suggested and did is to authorize this account caller. This is the account. This is the account yes. So, for the account to have all its creator and add the authorit to themselves because they are the one who is calling for it. The other one who is calling for it. However, so in this case, the Cloud funding it authoriteness can belong to the current user executing the local transaction, which is in this case it is correct Patak or it can belong to another user who shared it out of hand. So, that is not what is happening. That is not in the case of the Cloud funding that is not a comb but that is also possible. It is out of hand. Let us say some owned by some user who is not the current executor locally. However, being a public function execution, so there is authorize action function in the asset quality, CLL, wallet command, asset quality, authorize action, something something, so that is for public functions. It is not possible during public function execution, it is not possible to retrieve a value from the local oracle to support authorizations in public functions. Account contracts should save in contract storage. What actions have been pre authorized by their owner? Account contracts should save in contract storage. It is contract storage public. I do not know. We will learn. If an user has pre authorized action, then the account storage must be able to do it. These two patents command allow an account contract transfer with their an action is valid for a user both in private and public context. Yeah. Authorize actions. Enclipion and only fine keys. Encryption nullifying keys. As take it was used to define encryption nullifying keys that are needed for receiving a strictly quiet user to define user necessary. It is a necessary function. Oh, oh, sorry. So the stick requires the encryption nullifying keys to be defined that are needed for the encryption and the encryption nullifying is not. Select transaction sign in encryption nullifying is enshrined in the protocol. This means that there is a single scheme used for encryption and only fine keys derived from a master public key. This master public key in turn is used when deterministically derying the account address. As side effect of committing to a master public key, a part of the address is that this key cannot be rotate. While an account contract will implement could include methods written signing keys. This is not possible for intricts nullifying keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. We are exploring the usage of shared mutable to enable rotating keys. So, if you have the infinite source of the function of the posit, then you will find the ones and every feature of the function is the same that happens. Okay, we are not going to issue so that we already are already aware of that that's cost in the public blockchain like Ethereum. Yes, so then now you talk about permit flow again in the public blockchain. Again, which I will not go into. So, the permit flow which uses a meta transaction to let you use a signed the app of chain. Pass it to an, pass it as an input to the deposit function. The way the user only has to send one transaction to the developer. Okay, inastic, the operating year is 20 perastic, it's not as simple as might seem because of private set. Yeah, I figure that out. We are called from the hybrid set model, private state where is the hybrid state model? State model. Yeah. Private state is generally only known by its owner and those who they have shared it with because it relies on secrets, private state might be owned by the provider, but it means someone with the knowledge of these second team. Secret strategy is spending, you might see where this is going. I don't see where it's going. It's generally only known as owner and by its owner and those they have shared it with because it relies on secrets, private state might be owned by a contract. But it needs someone with knowledge of these secrets to actually spend it. So, it doesn't know. It needs the knowledge of these secrets because it's all secrets. So, private contract may own the state, owned the contract, private state which is the tokens may be owned by a contract. But they need knowledge of the secrets. If you're to implement the approved with an allowance in private, you might know the allowance. But unless you also know about the individual notes that make up these as balances, right, right, right, right, to be of no use to you. Yeah, you might know that. Yeah, let's say you want to allowance for defy of 100 which is a contract. You might know the allowance. Unless you know all that notes to spend, the user's funds you would need to know the decryption case for more. See, keys for more. Why this might sound limiting in what we can actually do, the main use of approals has been for simple contract interaction that the user is doing. In the case of private transactions, it's executed on the user device. So, it is not a blocker that the user needs to tell the executor secret. The user is executed. Yeah, of course. So, what can we do? The few more things we need to remember about private execution, to stay private, it happens on the user device. Additional user-propery information can be passed to the context. Contract, mid-exhibition via an Oracle call. For example, when executing a private transfer, the wallet will be provided the notes that the user wants to transfer through one of these Oracle calls instead of the functional arguments. This allows us to keep the function signature simple and have the user provide the notes. They want to transfer through the Oracle call. For a transfer, it could be notes provided, but could also use the Oracle to provide any types of, any type of data of the contract. So, we might borrow the idea from permit that the user can provide a signature. That's where we need to read permit. So, we can borrow the idea from permit that the user can provide a signature or witness to the contract. So, from permit the user can provide a signature or witness, user can provide a witness to the contract, which allows the contract to perform some action on the upper user. Since the witness is used to authenticate that someone can execute an action on the upper user, we call it an authentication witness for short. An action in this meaning is, is a blob of data that specifies what call is approved. What arguments it is approved with and the actor that is a teletor perpendicular to call. Transfer for a mechanism approved. What argument it is approved with five, the actor that is authenticated to perform the call. Whose actor that is authenticated to perform that call. In practice, this blob is currently offline, you could be a hash of the content pension, but it might change your time to make simulating simulations easier. Fuck me, what is simulating simulations? Easy path to simulating simulations involved. So, we can check what authorizations are required by TX, with van H H H H. Mission simulation, validate this with the user, and then proceed with the actual simulation and proof-chaination. So, we can check what authorizations are required by TX, with the initial simulation. So, we call the van H H H H. For example, of simulating simulation is, the need for simulating simulation is, the need for simulating simulation. You call the donate function of the crowdfunding contract. It will simulate the execution, it will come back and tell you, I need a note for, I need a note for transfer from function, from this user, for this, this, this, this, this, this, this, this, this are this are this set of arguments, which is quantity value and the destination, which is the contract. And from this, in terms of, and until the user, what transfer is required. So, we can see that the user is not in the same way as the user, but the user is in the same way as the user. So, we can see that the user is in the same way as the user, and the user is in the same way as the user. So, we can see that the user is in the same way as the user, and the user is in the same way as the user. Beautiful. I'm not in Murkrioli, we have the following, where the edge is a snark-friendly hash function. And, all hash is the hash of the function arguments. Caller, yeah, a stick address, contract, a stick address, selecter field, mentioned to outline an example, yes, I want an example. Let's say we have a token that implements authorate such that the transfer from free to be valid if is doing the transfer. Or there is a witness that the authenticator is a caller to transfer from is to be is a count. While this specifies the spending rules, must also know of the nodes to use them for anything. This means that a witness in itself is only half the information, creating the authentication action for the transfer. Or funds of defy contract could look like this. Action hash of defy token transfer selector, yes, which is transfer selector is transfer from. And action is the edge of crowdfunding, come a token, come a transfer from and hash of attack, crowdfunding and 1000. This can be read as, yeah, defy which is crowdfunding, right, is allowed to call token transfer. Please, this is what is important, this is what I want. This can be used as defy is allowed to call token transfer function and go and put it in the officially function. Let's do it this way. So I go to nodes of 15 to November and say where the fucking field. So I go to nodes of 15 to November and say where the fucking field is. So I go to nodes of 15 to November and say where the fucking field is. Okay, now we look at how this works, huh, with this out of the way, let's look at how this would work in the graph below. The exact content of the witness will differ between implementation as mentioned above. But for the sake of simplicity, you can think of it as a signature. Note it. Yes, a signature. Let us look at how this work in the graph below. For the exact contents of the witness, we will differ between implementations as mentioned before, but for the sake of simplicity, you can think of it as a signature, which the account contract can then use to validate a petroleum issue. The right way was what Claude had told me in the case of the Say timeline, top to bottom, D5 deposit, D5 deposit, token 1000. This case, it is crowdfunding.donate, token 5000, that is that was my action. From Alice to Alice account. That is account to the token contract. The exact account to the D5 contract. It is deposit, which is donate, deposit 2000, token.5. Then crowdfunding, token.5, the crowdfunding contract, we call transfer from attack, and token contract, check with Alice account, check if D5 may call transfer Alice crowdfunding, 5000. Authorization, given to Alice account. Authorization, for transfer of attack, crowdfunding, check authorization, so they account, provide the validity. Once Alice account has the authorid, the authorid is basically for transfer from a return, you give to Alice account. The authorid is given to a return account, for transfer of attack to crowdfunding, for five, yes, authorid is, so, a attack account is going to give the authorid to token. Seeing D5 may call, sorry crowdfunding may call, and then it is going to transfer, attack, crowdfunding, come a five, and it is going to do, yes, a token contract, if invalid authorid is closed error, otherwise it will transfer this, and from at D5, it will transfer Alice at D5, at the crowdfunding contract, it is going to donate five tokens, done. Yes, understood, understood. Yeah, it is interesting. So, this is re-entry, so it is re-entry is possible, it is mainly for show to illustrate the logic of the call, the call to the account contract, which is protects account, for checking authentication should be a static call, meaning that it cannot change state or may call that change state. This call is not static, it could be used for re-enter. What about public, okay, public also I want to know. As noted earlier, we could use the year student stand for public, but this seems like a waste of one, we have the ability to try writing some wrongs, instead we can expand our authorid scheme to also work in public. This is actually quite simple, instead of asking an oracle, which you can't do as easily because not private execution, we can just look it up when we need it, while we need while this needs the storage to be updated ahead of time. Can be the same TX, we can just store your authorid in a shared registry, this is actually quite simple, instead of asking an oracle, you just need to do it, you just need to do it, you just need to do it in a shared registry, and look it up and we need it, while this needs storage to be updated ahead of time and the same TX. We can quite easily do so by batching the authorid updates with the interaction of benefit of account contracts, batching is possible, that is a benefit of account contracts. A shared registry is used such that the execution from the sequinsors, yeah, sequence is point of view will be more straightforward and predictable, furthermore since we have the authoridization data directly in the public state, there will be more than one of the set and unset authorize and then use, in the same transaction, there will be no state effect after the transaction for the operation which is discussed. So, for public, this is how we are going to, yes, that available for documentation, just type, as you can see, using value in much more or this way, you know, common patterns, portals, yeah, odd witness. Good lord, I need to go through the guides entirely, private function, but for me, more I see, more I need to know. Public function, authenticating and action in type script, updating the pool state in more, good fucking bar, declaring storage, writing notes, some context, storage slots, storage slots, to the case of not example, okay, well, okay, well, I need to know, if you go back to the guides, on Twitter, yep. Yeah, so in the guides, authorid, I will figure out how to use it, that's correct, that's what I should have done in the first way, when I was trying to use it out from the contract, and I was unable to create authorid time, add out to it, further in the right manner, then this is from the tongue, just trying to how to do that. So next time I go back to the work, on contract, I'll be able to donate, call it, donate function, to donate tokens on behalf of the owner of the account balance, token balance, I will be able to execute it correctly using, see, a level it using the a step-of-a-step call it, command. Okay, public, we look at the public execution of the authorid type of execution. Alice sends a batch, the batch is authorized, the authorize crowdfunding to call transfer from a contract of attack crowdfunding, comma five. Yes. Yes. So, and they does that. Alongside the batch, second transaction in the batch is crowdfunding. donate. So, yeah crowdfunding. donate. Yeah, token comma five. So, token is not there in the crowdfunding in the arguments, just the number, yes, that's it. Five. Then Alice account, which is a attack account, this going to authorize crowdfunding to call transfer from a attack crowdfunding comma five. Yes. That is a tax account to authorize it. Which is an authorid. It gets added to Alice account. Sorry, a tax account creates a by a tax account, treated by a tax account, and validated by a tax account. Not validated. Added, or three, is added by a tax account for transfer method. Yes, transfer from. Attack comma. Crowdfunding comma five. Transfer from, yes. So, it puts in the register. Three. Then authorize to two, right? Yes. So, then, a tax account calls donate. Method on the crowdfunding contract and says this is a five. Yes. Five tokens. And then the crowdfunding contract is called to call transfer from. 곳age.ember. Then, the fronting is going to be transferred from a attack to crowdfunding for 5. It is going to call the token contract and token is going to check the author registry, the author registry is true, whether if, whether this may call, the token may call. And the public or this says yes, then it says, it sets it to false, this is not the attack crowdfunding 5 and done yes. And then transfer is run and then deposit is done by crowdfunding contract, donate is from the crowdfunding contract. Replace to ensure that the token request can only be used once, we can emit the action itself as 95. This way the authentication witness can only be used once, this is similar to how notes are used and we can use the same value for this. Note, however, that it means the same action cannot be activated twice, so you want to allow for the same action to be opened, and then you want to see the token contract to be enabled to emit the nullifier. Since it is checked with a static call, the calling contract must be shown, which is the crowdfunding contract. This is similar to non-saciniar C22, the word is the S.M. library to handle this. The difference is that we are not setting up the null ones, but allowing the execution of a specific action. We decided on this option as the default strategy, since it is more explicit and all user can agree exactly what they are signing. Also, most users of the rules are for contracts where the following interactions are called by the user themselves, so it is not a big issue that they are not as easily transferable at the comments. We do not need to limit ourselves to the transfer function. We can use the same scheme for any function that requires authentication, for example, for authenticating to burn or shield as it is or to vote in governance, contract of perform an operation and any protocol. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not easily transferable. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. Furthermore, since signatures are fully abstracted, how the key is stored in the contract is abstracted as well. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as easily transferable as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format. We are not as fast as the format.
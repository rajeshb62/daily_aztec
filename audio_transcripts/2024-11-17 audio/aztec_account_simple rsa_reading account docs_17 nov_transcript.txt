 Hello, hello, today is 17th of November and I am starting Sunday and I am working it's 12.12 noon. It's an RR.5 to my lunch break because it's going to be again. Have you seen the meeting? I suppose so. I probably take back before I go. I'm going to switch on. I'm going to switch on the... Peter, what are you going to do? This house is not my best. It's just me. Yeah, I'm going to get it. I'm going to switch on. Hmm. Alright, we start. So, well, the exciting detail. Discovery learning of this morning. And late last night. As I've been on this effort right now since yesterday, he's to create a... ...a-count, as check account wallet, as check account basically. And the simplest possibility implementation there, huh? Is what I want to go with. And the outcome I got and this makes sense for an implementation and everything that works. And it gives me a lot more clarity. Is this... Is there is her username and password? username is, you know, it can be email address. For now it's just a string book. Okay, and then I can combine it with the... So I'm thinking mental model is in here. But the by-implementation would be username. Yes. Yes, the mental model is username. And the mental model is... But the I'm going to start with username, huh? I'm going to start with username. And so there is an authentication mechanism, which includes username and password. Which is a simple way of authentication, so the input can be based on that. So I have these details, right? So username and then the... There is a public private, there is an RSA, public key and private keypad, and they are used for sign-up. All right? So my... what I'm going to store against my username, huh? So it's like a struct or a dict or whatever. It is... it contains... it contains an email address. Sorry. It is... you can call it like this. Let's say you account, okay? And in square brackets you call... You know, you're username. So we kind of look at... so we are basically... We're going to like a... a... a disk disk dictionary look up, yeah? So by name, which is like username in brackets, so it will retrieve the... Your... your dictionary, which is like a struct and it's going to... And it's going to contain... ...unitialize it with... ...the... the... ...the... password. No, not password. Unitialize it with... multiple things. One is... a hash of the password and a sort. Okay, so you go first, you're going to save the sort. Okay, so the sort is... very specific to this account, which is... ...absolutely random number. There is a sort, you save them. Then there is... ...Dinderies... ...and then there is... ...Private Key, you save... Sorry, you save the sort. You save the... the hashed... ...authentication hashed... ...authentify it, huh? So, which is basically... ...a hash of your... your password and... ...salt concatenated. That is the authentication, so it's hashed key. Or hash of password, password hash. And then you want to also save the private key, which is randomly generated... ...Ara's a public key, huh? So, it is going to... sign a sign on your behalf, right? So, you ought to sign. So, once you are in your account, the signature is going to happen automatically. And the payload is going to... ...yes, so you're going to auto sign the transactions. And then we can introduce more of the stock. So, that UX is pretty cool, huh? So, you're going to sign for the... ...but from the... ...you're going to sign the account of the wallet is going to sign on your behalf... ...by keeping full privacy, but it is... ...you're not going to have to sign. Alright? So, well, that's interesting. And the signature is going to... ...your account is going to receive the signature, huh? And... ...and then... ...yeah, your account is going to receive the signature... ...and... ...you're going to authenticate you. So, that is the flow. And then what about signature? So, I have the Python file. So, this is literally my local Python file. Alright? I'm going to put it in the... ...dark. Okay? You want to talk about... ...user name... ...password... ...RSA... ...oblicky... ...by red key... ...ness... ...what secures the account. And then authentication... ...by... ...user name... ...and password... ...signing... ...off message... ...which is transaction payload... ...is... ...then you can message... ...Pinode... ...is the payload... ...yeah... ...the user payload... ...is... ...uh... ...you're right, huh? RSA signature. Right? And this is the local Python... ...by authentication... ...and then in the code... ...right? ...yeah... ...Sightermers Book. Yes. And... ...now I'm going to see how all the verify is... ...okay, I can enter the code to the code... ...we'll probably see below the code is it, does it's the log? This is from Plorn... ...all called C-plorn. Yeah. So let's look at the latest... ...it seems simple authentication... ...without signing... ...let me look at the latest simple... ...it seems simple. Alright, how is it different from the other one... ...class simple auth with sign. So, it's going to register a new user... ...sort. OAS.2.9.16.8. Has equals hash loop. ...short. ...and it's password. ...sort. ...and codeix. ...sort. ...private key. RSA generated private key. Public exponent and key size. Generator is a key. Public key is private key. Public key. Social users, sort hash, yes... ...select public key. So, simple auth with sign. So, it's one function, one method. Yes, this is what I'm interested in... ...to be honest. Sign message. Authenticate. Authysrite. That means... ...you then you assign private key. Sign message. ...then you assign... ...then you private key. You sign. Yes, message. ...in code it. Piding pieces. All right. Very ficing nature. Okay. So, account verifies... ...account doesn't write. Now it doesn't sign. Why doesn't it not sign? Well, this is actually a very good implementation... ...for myself. Let me put it here. Instead of the previous one. This is a brilliant app. So, I've reproduced the SD card. This is... ...instructure so close to the implementation that I'm going to do. This is beautiful. In... ...noa. For account, yeah? I'm going to read. Basically try and reproduce. Aye aye aye aye aye aye aye aye aye aye aye aye aye aye aye aye aye. ... ... ... ... ... ... Public key is private key and the scope of key public key. Yeah? Self-beer. So, the fourth indicate. There's an authenticate method. ... Yes. So, there is a simple lot. Which sign? So, it's a class. Perfect. So, it's a class account. That is the account on the literature. We find authenticate. We find sign message. Okay, sign. You'll open it. So, there's a self-use-animant password. And message. So, all these are input-stale sign message. Sign message. Crayon says, wallet. So, it's the credential. The wallet. Well, wait. We need one of called sign. Which is using RSA library. Sign message. Start input. Filing PSS. M&GF equals party in your fashes. Solve length-filing PSS max length-huck this. Up this thing. But I need to go to the padding one. I need to have this. This is the beautiful plot term on that. The plot. Said. Which is the source. All right. So, I'm going to delete this fucking code. I'm going to put my simple code from before. Yeah. And then we will go and go there somewhere. Some other time, which is a little like one. Let's get it more to answer. We start with this. All right. We start with this. We use the struct from somewhere else. Yes. We use the struct from somewhere else. Oh, I want to ask a lot. If you click the clot can be me version. Without the. What is this hash password? Yeah. Should we just find what about. The signing part padding. What is this padding? There is no one left in there. So, we space at this point. Why not use the query for the same columns? then you give me version without it. If simple, then explain. To me, I'll give it. Okay, it's all about the signature, but you can see why it might seem complex, but it makes great simply. This is standard checker, it's all too simple to use, then creating our own padding scheme. All right, here's our same for with the combination, but the padding scheme, all right. Simple, let's go. Let's go, let's go. Okay, this is what we're going to do. All right. And because I wanted to structure, this is the best of the course. Cloud is a lot to the wind. That's what I'm going for. So clearly, so clear. Okay, no, I'm going to keep it. Let's see, are there a way to give the padding function? And then, compute that with something else. Like a circle, like a circle, like a circle, like a circle fucking through the fuck me. Absolutely, you know, perhaps a fucking structure. Fuck. Any 15 minutes in? Good morning, session. All right, so I have the python instruct here. Which I'm going to use elsewhere, yeah. So I'm going to put it in my simplest of the time. All right. Well, let me create another one. Okay. Yeah. Okay. Back home. Yeah. Simple, okay. Now I see sign. So, how about a little bit of a little bit of a little bit of a little bit? Maybe. Okay. So, this is it. Come on, hex. So, and then you have this glass. Oh, this glass is very important for me. I think this glass. Come on, anchor. This method I call. That call is different methods. Come on, hex. I see a bow. Then I see. Come on, hex. Let's get. How about. Let me say sign a message. Let's get a bow. This is here. And I say. Okay. Then I basically repeat this one. I'm going to get a few more. Okay. Let's run through this good struct method of using RSA. Yes. Simple, out to sign. Chendered. So, this is the glass. Then I use basically, clear. Really, straight user. Alice and past three. Okay. Registered that user. Then message. Hello. This is Alice. What sign message? When I registered, do I also create, yes, I created a public and private. And it's, it's rare. Hmm. That is good. That is good. Hmm. Man. Oh man. Hmm. Hmm. Okay. So, register the account. Which means, it also random, I don't need to be solved. I don't need to private key and a public key. Okay. It's a sign. And my account is sign for me. Message. Hello. This is Alice. See, there's a lot of sign message. Alice, come on. Fast. Come on. Hmm. Hmm. It's a good check. Oh, I want to say this, it's a good check. Alice. See this signature. Interesting. See this signature looks like this. What is this signature looks like this? Let me ask, plot. What is this signature looks like this? Why? That's the signature. Look like this. Hmm. What you're seeing is the raw binary RCC signature in white format. It looks cryptic because it's not meant to be human readable. It's just raw binary data. For better. No, no, no, no, no, no, no. Stop, stop, stop, stop, stop, stop, stop, stop, stop, stop. No, no, no, no. No, I don't want a double signature. Just one corner stand in that signature. No change in code required. For my personal understanding of signature only. Let me explain what this signature represents. The B at the start means this is a Python bytes object, raw binary data. These has fixed sequence represents single bytes. Sorry, Simon. I see high C. So on the ninth of the signature is to it is white to the report of bits because we used to the report bit RSE key. Yes, I want to the report bit because you know all my ashes are to six bit in a stack that's what it supports. What you're seeing is essentially a very large number of signatures. The original sprites the signature is created by taking a message as she does, she's so it's a large number. Yes, yes, it's about 64 hexa hexa hexa hexa. 64 is eight. Yeah, eight into 64 is to six. I don't know. Eight. 64 is to par eight. Is it? Super 3 is it yes. Two parts six is 64 or two parts six is 64. Two parts three is eight. Two parts six is 64. Okay, so what about 16? Two power three two powerful. So two power for 16 and 64 of those. 64 into four is two five six. So there are 64 terms which is hex. So it turns out being to six bits. Okay, got it. Yeah, it's just a 16-inch number. It looks so scary. That's what it is. It's a two six bit number which is which sits perfectly with our, with our, our stop. Is valid. So then we look at the signature and then we run is valid. What very pie signature, Alice message signature, print signature, Valid is valid true. Yes. B pie signature. Okay, Alice message is let's say wrong message. Pass to one to three, wrong pass message. Pass sign wrong pass. It's just sign with home passports true. Yeah. Yeah. Yeah. Okay. This is nice progress. This is good progress. My post-mortem merged with progress. Fuck me. Well, of course, it's bad because post-mortem is not going to end. Okay, now but this is good progress. Let's go back to post-mortem. I think so. Let's go back to post-mortem, which is essentially. Going with my documentation basically, I met the, you know, accounts in the account section. And that is where. And then I had to go through the whole thing. I will go through the whole thing today. It's 12, 13 in the morning. No, that's just of the day I'm going to spend because now I have clarity. If I want to build an account, what I'm going to build. So I know I want to go through the documentation. I know exactly the kind of account I want. I want what I happen and I have Python code for it. Hey. Oh. Public key, public key, defantry point payload. Let's try it calls public calls non-signature equals payload. Let payload hash equals hash private call public calls non-signature. Okay. So I'm looking at at the pseudo code for account in the Aztec docs documentation. 26 minutes into this session. Beautiful day outside. Clear sky almost a few clouds here in their light clouds. Sprite outside. The water is gone. The water is gone. Def entry point payload. That private calls public calls non-signature equals payload. Let payload hash equals hash private calls public calls non-signature. So entry point payload payload is what's yes of course. So it was the entire payload payload consists of private calls public calls non-signature. So there's this whole payload. Yeah. Pilot consists of well the transaction payload plus signature. That's it. That's simple as understanding. So you assign them to all these three different variables. And then what we do is then you assign yes payload hash. Then you calculate the hash of the payload which is the hash without the signature. Yeah. Yeah. Let payload hash equals hash of yes. Pilot hash is the hash of the payload without the signature. And you've granted the signature. Okay. Yeah. Of course. Okay. So you receive the payload. Payload is essentially the transaction payload plus signature. Then what you do is you hash the transaction payload. Right. And then you pass the signature transaction payload and public key to an authentication signal. It's signature method. So it tells you what's happening here. Yeah. It tells you whether your signature is valid. Right. And once you authenticate it. What's interesting is the transaction and the payload hash transaction payload hash is sent to your certificate method. That is interesting. So valid signature. Oh. So while it is yeah. Well. I mean, it's not surprising. Because payload hash is the message hash. Yeah. So the message hash. And the signature is sent to the valid signature method. For each private call in private calls. Okay. Yeah. I mean validates signature is one was one simple method. You are validating both the signature and the account. Hmm. There's no account authentication. There is only signature verification. Hmm. I see. So it's just signature authentication. We are from the account. So I mean, I'm doing the account application. So this does not go on the application. This does signature verification. Where is the encryption key here? There's an encryption. Hmm. Okay. Well, you see. This is good because this means. Not clarity. Better understanding of where we are. So it only does signature verification. Validate signature. It doesn't allow to do validate account. But how do you know the account is right? Where is the account status? In the below. This transaction below. So every account only. Hmm. Okay. So there is no fact. So just a public private key from RSA is enough. This method entry point doesn't even take the user name and password. In my in the example of my contract. Okay. Good. Okay. Okay. Okay. What I should do is a session by session. Get up. Come. You know, commit message is date and session. session. And in each session. Of course there is the word. There is all that. There are all the words. There's words. There's a word. There is. The audio transcript. There is your transcript. And I upload data as one session. Create and that is in a new folder. May by name. session this and session. session that is just a lot of text and links. And I upload it. That is my. My work flow. Yes. Then summarise. When I want to summarize. You know, I do this for five days and two days. I summarize everything learned. Yes. Yes. Yes. Yes. Yeah. No. It will change. This work flow will change. When I have been coding. Well, the code is separate because. Code is separate because. Code gets uploaded to a different repo. And I can put that link here. And I can say current repo's working on. And the repo is our own GitHub. I think so. And this will be a little turbo charge in my work flow. At least make the progress tangible. And this additional damage harm. So the traditional. The traditional. And this is. They come in. When you're not in the. What's the of your brain is less. Stress it's like your your course. Chores. So, Chores are. They are meditative. So, when they are. Of course, I mean, I don't want to be far. And this one is completely different. Very different. my universe and what you know. Maybe I will be this way of probably useful other places as well. I thought you could do a bit of a place but you could be not. But I saw... This guitar is the right place for my... for everything. Alright. Hmm. I looked at this key takeaway. Let me put it in my documentation. It seems. Follow me there. You are not doing that. Especially. You go there. For a call. Contra. Here. It seems. It seems that... that the payload is going to be fine. The snort take. Use a authentication. It is just about payload. Signing. Using the... Yeah. The... Signing. Please. Yeah. Yeah. This is progress. This is progress. What I see is progress. So... Ah... Okay. This... Shoot. Where could change? Yeah. Yeah. So... We access to the private key. This is basically... This is kept by... by others. By... This is kept. Yeah. We have changed the floor. Change the floor. Yeah. So let me make this session. I will have a more interesting document. This session. Or the commit session is only the commit message. Yeah. It's not bit with somebody. But it is a full-der by date. I do not by date. If you only file for that bit. Yeah. How do you transfer quite good? And the progress on the documents is by... Yeah. All you files by date. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. There's a lot of things. Are you the files? Are you the files? Okay. Yeah. I think that's what we're going to do. That's a simple account binding build. Try 16 of them but not a good. That's a simple account build. Since end of Kabir 2. What is Al Kabir 2? I'm reading the transcript from last night which I did I did the transcript this morning. The quality is much better because the audio is on low. And it does a much much better job. That is why you need fast... You need... You need my accent better. Man, this is good. This is good. Last night's progress is very good. Transcribe transcription the quality. This is very good. Very, very, very, very good. What I want to say something. Then I keep it in every... I speak it in a way that is useful and concise and good information for the transcription because I'm going to be reading the transcription after word. So I did not fill the silences so to speak. When I have to speak, when I want to say something, when I want to create audio notes, that is when I use the words. And it's based and then I speak it, speak the audio note. And I know it will be available to me in text because I will be transcribing it subsequently. So this approach is beautiful. I mean, yes, of course. Now that I have this thing going, it doesn't make sense to do it any other way. I mean, with improvements, there is opportunity for improvement. But this looks and feels and sounds like a very good, very good workflow. I basically need to figure out where my how I fund my workflows. How I put and guess how I nail down my workflow. It's a good, there's a great seed here. And it will be productive from here on out no matter what I think is from before. Yes, so let's focus on that and let's focus on improving the workflows later. Not now. I'm looking through the transcript from last night. It's a good transcript. Maybe I can have the audio transcript to ignore the music. I can do that later, not now. There is so much fucking potential here. And I'm excited. I'm excited. There's a non-engineer. The use of the music guitar. I'm going to stop. I'm going to stop. I'm going to stop. I'm going to stop. I'm going to stop. I'm going to stop. Alcabir 2 is Alfa Bintu, not Alcabir. Alfa Bintu, not Alcabir 2. As Tixmart contract, it's transcript as Tixmart contract. I'm going to stop. I'm going to stop. I'm going to stop. I'm going to stop. I'm going to stop. There is a bass model. There is a large model. I'm going to stop. I will use that as course. I'm still reading yesterday's transcript last night's transcript. It is good. I keep continuing. It's great to have this notes. For me to understand what I do in this specific session. I'm going to stop. I'm going to stop. I'm going to stop. I'm going to stop. I'm going to stop. I'm going to stop. I'm going to stop. I'm going to stop. I'm going to stop. I'm going to stop. I'm going to stop. I'm going to stop. I'm going to stop. I'm going to stop. I have to figure out the story. I'm going to use that to increase the amount of recordings. I've used it for a week. I've used it for everything that I want to use it. I've used it for a week. I've used it for a week. I've used it for a week. I've used it for a week. I've used it for a week. I've used it for a week. I've used it for a week. I've used it for a week. I've used it for a week. I've used it for a week. I've used it for a week. I've used it for a week. I've used it for a week. I've used it for a week. I've used it for a week. I've used it for a week. I've used it for a week. I've used it for a week. I've used it for a week. I've used it for a week. I've used it for a week. I've used it for a week. I've used it for a week. I've used it for a week.